# -*- coding: utf-8 -*-
"""Deep Research Clone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nljYP_0aSM9iNJl824nvfZk0ud00sY-H

# Setup
"""

from openai import OpenAI
import os, json, itertools
from IPython.display import display, Markdown

import getpass

openai_api_key = getpass.getpass("Enter your OpenAI API key: ")

# Set up OpenAI API key in the os
os.environ['OPENAI_API_KEY'] = openai_api_key

# from google.colab import userdata
# userdata.set_secret('ai_agents_openai')

# from google.colab import userdata
# openai_api_key = userdata.get('ai_agents_openai')

# Connect to the OpenAI api
client = OpenAI()

"""# Define the inputs"""

# Define the model inputs
MODEL = "gpt-4o"
MODEL_MINI = "gpt-3.5-turbo"
TOOLS = [{ "type": "web_search" }]

# Developer message definition
developer_message = """
You are an expert Deep Researcher.
You provide complete and in depth research to the user.
"""

# Request the topic of research
topic = input("Please enter the research topic: ")
topic

"""# LLM asks questions"""

# Define here the prompt to clarify
prompt_to_clarify = f"""
Ask 5 numbered clarifying question to the user about the topic: {topic}.
The goal of the questions is to understand the intended purpose of the research.
Reply only with the questions
"""

# Get the OpenAI API to ask 5 clarifying questions
clarify = client.responses.create(
    model = MODEL_MINI,
    input = prompt_to_clarify,
    instructions = developer_message
)

# Get the questions
questions = clarify.output[0].content[0].text.split( "\n")
questions

# Ask each question to the user
answers = []
for question in questions:
  answer = input(question)
  answers.append(answer)

"""# Web searches

## Goal and Queries
"""

# Write the prompt_goals prompt
prompt_goals = f"""
Using the user answers {answers} to que questions {questions}, write a goal sentence and 5 web search queries for the research about {topic}
Output: A json list of the goal and the 5 web search queries that will reach it.
Format: {{\"goal\": \"...\", \"queries\": [\"q1\", ....]}}
"""

# Use the responses API
goal_and_queries = client.responses.create(
    model = MODEL,
    input = prompt_goals,
    previous_response_id = clarify.id,
    instructions = developer_message
)
goal_and_queries.output[0].content[0].text

# Formatting and loading as JSON
plan = json.loads(goal_and_queries.output[0].content[0].text)

# Check the goal and the queries
print(plan["goal"])
print(plan["queries"])

# Store the goal and queries
goal = plan["goal"]
queries = plan["queries"]

"""## Web search"""

# Print the first query
print(queries[0])

# Web search with the the responses endpoint
web_search = client.responses.create(
    model = MODEL,
    input = f"search: {queries[0]}",
    instructions = developer_message,
    tools = TOOLS
)

# Investigate the output
# Retrieve the id
web_search.output[1].id

web_search.output[1].content[0].text

# Build the function for the web searches
def run_search(q):
  web_search = client.responses.create(
    model = MODEL,
    input = f"search: {q}",
    instructions = developer_message,
    tools = TOOLS
  )
  return {"query": q,
          "resp_id": web_search.output[1].id,
          "research_output": web_search.output[1].content[0].text}

# Test the funtion
run_search(queries[0])

"""# Verifying if we have enough information to reach the goal"""

# Create a function that evaluates the outcome
def evaluate(collected):
  review = client.responses.create(
      model = MODEL,
      input = [
          {"role": "developer", "content": f"Research goal: {goal}"},
          {"role": "assistant", "content": json.dumps(collected)},
          {"role": "user", "content": "Does this information will fully satisfy the goal? Answer Yes or No only."}
      ],
      instructions = developer_message
  )
  return "yes" in review.output[0].content[0].text.lower()

# Verifying if we have enough info
collected = []
for _ in itertools.count():
  for q in queries:
    collected.append(run_search(q))
  if evaluate(collected):
    break

  # If no: perform 5 more questions
  more_searches = client.responses.create(
      model = MODEL,
      input = [
          {"role": "assistant", "content": f"Current data: {json.dumps(collected)}"},
          {"role": "user", "content": f"This has not met the goal: {goal}. Write 5 other web searchs to achieve the goal"}
      ],
      instructions = developer_message,
      previous_response_id = goal_and_queries.id
  )
  queries = json.loads(more_searches.output[0].content[0].text)

"""# Write the final report"""

# Use the responses endpoint to write the deep research report
report = client.responses.create(
    model = MODEL,
    input = [
        {"role": "developer", "content": (f"Write a complete and detailed report about research goal: {goal}"
                                        "Cite Sources inline using [n] and append a reference"
                                        "list mapping [n] to url")},
        {"role": "assistant", "content": json.dumps(collected)}],
    instructions = developer_message
)
print("\n=== FINAL REPORT ===")
display(Markdown(report.output[0].content[0].text))

